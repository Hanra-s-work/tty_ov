name: tty-ov-gh-packages

on:
  push:
    tags:
      - 'v*'

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        lib_packages=$(find ./*/ -name "requirements.txt" -type f)
        first_requirement=$(echo $lib_packages | cut -d " " -f 1)
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest

    - name: building the package
      run: |
        pip install build
        python -m build

  increment-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --match "v*" $(git rev-list --tags --max-count=1))
          echo "Latest Tag: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Check if Latest Tag is a Release
        id: is_release
        run: |
          if [[ $latest_tag == "v"* ]]; then
            echo "::set-output name=is_release::true"
          else
            echo "::set-output name=is_release::false"
          fi

      - name: Increment Tag Version
        id: increment_tag
        run: |
          is_release="$GITHUB_REF"
          if [[ $is_release == "true" ]]; then
            # Parse the latest tag and increment the version component you want
            # Example: Convert "v1.2.3" to "v1.2.4"
            new_tag="${latest_tag/v/}"  # Remove the leading "v"
            IFS='.' read -ra version <<< "$new_tag"
            ((version[2]++))  # Increment the third version component
            new_tag="v${version[0]}.${version[1]}.${version[2]}"
            echo "New Tag: $new_tag"
            echo "::set-output name=new_tag::$new_tag"
          else
            echo "Latest tag is not a release. Skipping tag increment."
          fi

      # Add the following steps if you want to publish to GitHub Releases
      - name: Build and publish as GitHub release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*  # Replace with the path to your release artifacts
          tag_name: $new_tag
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ORG }}
