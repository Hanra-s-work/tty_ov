name: tty-ov-gh-packages

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  TAG_FILE: version.txt
  SETUP_FILE: setup.py

jobs:

  increment-the-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          git fetch --tags # Make sure to fetch the tags first
          latest_tag=$(git describe --tags --match "v*" $(git rev-list --tags --max-count=1))
          if [ -z "$latest_tag" ]; then
            echo "No tags found matching 'v*'."
            latest_tag=v1.0.0
            echo "Using a default tag: $latest_tag"
            echo "name=$latest_tag" >> $GITHUB_ENV
          else
            echo "Latest Tag: $latest_tag"
            echo "name=$latest_tag" >> $GITHUB_ENV
          fi

      - name: Check if Latest Tag is a Release
        id: is_release
        run: |
          is_release=false
          if [[ $latest_tag == "v"* ]]; then
            is_release=true
          fi
          echo "is_release=$is_release" >> $GITHUB_ENV
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "github_env = $GITHUB_ENV"
          echo "Is_release = $is_release"
          echo "env.Is_release = ${{env.is_release}}"
          echo -e "\n\n\n\n\n\n\n\n\n"

      - name: Increment Tag Version
        id: increment_tag
        run: |
          is_release="$GITHUB_REF"
          if [[ $is_release == "true" ]]; then
            # Parse the latest tag and increment the version component you want
            # Example: Convert "v1.2.3" to "v1.2.4"
            new_tag="${latest_tag/v/}"  # Remove the leading "v"
            IFS='.' read -ra version <<< "$new_tag"
            ((version[2]++))  # Increment the third version component
            new_tag="v${version[0]}.${version[1]}.${version[2]}"
            echo "New Tag: $new_tag"
            echo "name=$new_tag" >> $GITHUB_ENV
          else
            echo "Latest tag is not a release. Skipping tag increment."
          fi
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "github_env = $GITHUB_ENV"
          echo "new_tag = $new_tag"
          echo "env.new_tag = ${{env.new_tag}}"
          echo -e "\n\n\n\n\n\n\n\n\n"
      - name: Update module version
        run: |
          if [ -f ${{env.SETUP_FILE}} ]
          then
            echo "Updating version in ${{env.SETUP_FILE}}"
            echo -e "\n\n\n\n\n\n\n\n\n"
            echo "Tag: ${{ steps.increment_tag.outputs.new_tag }}"
            echo -e "\n\n\n\n\n\n\n\n\n"
            # sed -i "s/version='.*'/version='${{ steps.increment_tag.outputs.new_tag }}'/g" ${{env.SETUP_FILE}}
          fi
      - name: Save module version
        run: |
          echo "${{ steps.increment_tag.outputs.new_tag }}" > ${{env.TAG_FILE}}
          echo "New Tag: ${{ steps.increment_tag.outputs.new_tag }}"
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "Content: $(ls)"
          echo -e "\n\n\n\n\n\n\n\n\n"

  build:
    needs: increment-the-tag
    if: success()
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"] # ["3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get non published python packages
      run: |
        git clone "https://github.com/Hanra-s-work/ask_question.git" aq
        git clone "https://github.com/Hanra-s-work/colourise_output.git" co
        echo "Content: $(ls)"
        echo -e "\n\n\n\n\n\n\n\n\n"
    
    - name: Building dependencies
      run: |
        FOLDERS="aq co"
        echo -e "\n\n\n\n\n\n\n"
        echo "FOLDERS = $FOLDERS"
        echo -e "\n\n\n\n\n\n\n"
        echo "Installing build"
        pip install build
        echo "looping through"
        for elem in $FOLDERS
        do
          echo -e "\n\n\n\n\n\n\n"
          echo "Entering $elem"
          cd "$elem"
          echo "Checking if requirements in $elem"
          if [ -f requirements.txt ]
          then
            echo "Installing requirements $elem"
            pip install -r requirements.txt
          fi
          echo "Building $elem"
          python -m build
          echo "Entering dist"
          cd dist
          echo "Content: $(ls)"
          echo "Locating a package"
          PIP_PACKAGE="$(find . -name "*.tar.gz" -type f | cut -d " " -f 1)"
          echo -e "\n\n\n\n\n\n\n"
          echo "Package found: $PIP_PACKAGE"
          echo -e "\n\n\n\n\n\n\n"
          pip install "$PIP_PACKAGE"
          cd ../..
        done
        echo -e "\n\n\n\n\n\n\n"
        pip list
        echo -e "\n\n\n\n\n\n\n"
        echo "Content: $(ls)"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        lib_packages=$(find ./*/ -name "requirements.txt" -type f)
        first_requirement=$(echo $lib_packages | cut -d " " -f 1)
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: building the package
      run: |
        pip install build
        python -m build
    
    - name: Remove repositories
      run: |
        rm -rvf aq co
    
    - name: Installing the package
      run: |
        PIP_PACKAGE="$(find . -name "*.tar.gz" -type f | cut -d " " -f 1)"
        echo -e "\n\n\n\n\n\n\n"
        echo "Package found: $PIP_PACKAGE"
        echo -e "\n\n\n\n\n\n\n"
        pip install "$PIP_PACKAGE"

    - name: Test with pytest
      run: |
        pytest


  publish-tag:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Add the following steps if you want to publish to GitHub Releases
      - name: Get version
        run: |
          new_tag=$(cat ${{env.TAG_FILE}})
          echo "New Tag: $new_tag"
          echo "::set-output name=new_tag::$new_tag"
      - name: Build and publish as GitHub release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*  # Replace with the path to your release artifacts
          tag_name: $new_tag
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_ORG }}
